{"version":3,"sources":["webpack://oyster-card/./app/stations.js","webpack://oyster-card/./app/transports.js","webpack://oyster-card/./app/main.js","webpack://oyster-card/./app/fares.js"],"names":["Stations","constructor","station","this","_station","stations","name","find","e","Transports","transport","_transport","transports","type","fares","credit","maxFare","_currentFare","zonesTravelled","busJourneyFare","enterBarrier","leaveBarrier","BUS","TUBE","fare","barrierEntry","method","currentFare","push","barrierLeave","calculateFare","zones","value","zone","uniqueZones","Set","console","log","includes","length","newBalance"],"mappings":"mBAAe,MAAMA,EACjBC,YAAYC,GAERC,KAAKC,SAAWF,EAEhBC,KAAKE,SAAW,CACZ,CACI,KAAQ,UACR,KAAQ,KAEZ,CACI,KAAQ,eACR,KAAQ,OAEZ,CACI,KAAQ,YACR,KAAQ,KAEZ,CACI,KAAQ,cACR,KAAQ,MAKpB,YAAYC,GACR,OAAOH,KAAKC,SAEhB,cACI,OAAOD,KAAKE,SAASE,MAAKC,GAAIA,EAAEF,OAASH,KAAKC,YC7BvC,MAAMK,EACjBR,YAAYS,GAERP,KAAKQ,WAAaD,EAElBP,KAAKS,WAAa,CACd,CACI,KAAQ,OAEZ,CACI,KAAQ,SAMpB,cAAcC,GACVV,KAAKQ,WAAaE,EAGtB,gBACI,OAAOV,KAAKS,WAAWL,MAAKC,GAAKA,EAAEK,OAASV,KAAKQ,cCXzD,IAAIG,EAAQ,ICTG,MAiBXb,YAAYc,EAAS,IACjBZ,KAAKY,OAASA,EACdZ,KAAKa,QAAU,IACfb,KAAKc,aAAe,EACpBd,KAAKe,eAAiB,GACtBf,KAAKgB,eAAiB,IAEtBhB,KAAKiB,aAAe,gBACpBjB,KAAKkB,aAAe,gBAEpBlB,KAAKmB,IAAM,IAAIZ,EAAU,OAAOA,UAChCP,KAAKoB,KAAO,IAAIb,EAAU,QAAQA,UAQtC,kBACI,OAAOP,KAAKc,aAMhB,gBAAgBO,GACZrB,KAAKc,aAAeO,EASxBC,aAAavB,EAASwB,GAElBvB,KAAKwB,YAAexB,KAAKY,OAASZ,KAAKa,QAInCU,EAAOb,OAASV,KAAKmB,IAAIT,KACzBV,KAAKwB,YAAexB,KAAKwB,YAAcxB,KAAKa,QAAWb,KAAKgB,eAE5DhB,KAAKe,eAAeU,KAAK1B,EAAQA,SAUzC2B,aAAa3B,EAASwB,GAEdA,EAAOb,OAASV,KAAKmB,IAAIT,MAGzBV,KAAKe,eAAeU,KAAK1B,EAAQA,SAUzC4B,gBAEI,IAAIC,EAAQ,GAGZ,IAAK,IAAIC,KAAS7B,KAAKe,eACnBa,EAAMH,KAAKI,EAAMC,MAIrB,MAAMC,EAAc,IAAI,IAAIC,IAAIJ,IAWhC,OAFAK,QAAQC,IAAIH,GAEJA,GAEJ,KAAKA,EAAYI,SAAS,OAASJ,EAAYI,SAAS,KACpDF,QAAQC,IAAI,sBACZlC,KAAKwB,YAAexB,KAAKY,OAAS,IAClC,MAGJ,KAAKmB,EAAYI,SAAS,MAAQJ,EAAYI,SAAS,OAASJ,EAAYI,SAAS,KACjFF,QAAQC,IAAI,kCACZlC,KAAKwB,YAAexB,KAAKY,OAAS,EAClC,MAGJ,KAAKmB,EAAYI,SAAS,OAASJ,EAAYI,SAAS,MAAQJ,EAAYK,OAAS,EACjFH,QAAQC,IAAI,kCACZlC,KAAKwB,YAAexB,KAAKY,OAAS,EAClC,MAEJ,KAAKmB,EAAYI,SAAS,MAAQJ,EAAYI,SAAS,MAAQJ,EAAYI,SAAS,KAChFF,QAAQC,IAAI,mBACZlC,KAAKwB,YAAexB,KAAKY,OAAS,IAClC,MAEJ,QACIqB,QAAQC,IAAI,uCACZlC,KAAKwB,YAAexB,KAAKY,OAASZ,KAAKa,WD1HvD,MAAMM,EAAM,IAAIZ,EAAU,OAAOA,UAC3Ba,EAAO,IAAIb,EAAU,QAAQA,UAG/BI,EAAMW,aAAa,IAAIzB,EAAS,WAAYuB,GAC5CT,EAAMe,aAAa,IAAI7B,EAAS,gBAAiBuB,GAEjDT,EAAMW,aAAa,IAAIzB,EAAS,gBAAiBsB,GACjDR,EAAMe,aAAa,IAAI7B,EAAS,WAAYsB,GAE5CR,EAAMW,aAAa,IAAIzB,EAAS,gBAAiBuB,GACjDT,EAAMe,aAAa,IAAI7B,EAAS,eAAgBuB,GAEhDT,EAAMgB,gBAMV,IAAIU,EAAa1B,EAAMa,YAEvBS,QAAQC,IAAIG,I","file":"main.bundle.js","sourcesContent":["export default class Stations {\n    constructor(station) {\n\n        this._station = station; \n        \n        this.stations = [\n            {\n                \"name\": \"Holborn\", \n                \"zone\": \"1\"\n            },\n            {\n                \"name\": \"Earl's Court\", \n                \"zone\": \"1,2\"\n            },\n            {\n                \"name\": \"Wimbledon\", \n                \"zone\": \"3\"\n            },\n            {\n                \"name\": \"Hammersmith\", \n                \"zone\": \"2\"\n            },                                    \n        ]; \n    }\n\n    set station(name) {\n        return this._station; \n    }\n    get station() {\n        return this.stations.find(e=> e.name === this._station);\n    }\n\n    \n}","export default class Transports {\n    constructor(transport) {\n\n        this._transport = transport;\n\n        this.transports = [\n            {\n                \"type\": \"bus\",\n            },\n            {\n                \"type\": \"tube\",\n            },\n        ];\n    }\n\n\n    set transport(type) {\n        this._transport = type;\n    }\n\n    get transport() {\n        return this.transports.find(e => e.type === this._transport);\n    }\n\n\n}","import Stations from './stations';\nimport Fares from './fares';\nimport transport from './transports';\n/**\n * Tube Holborn to Earl's Court\n * 328 bus from Earl's Court to Chelsea\n * Tube Earl's court to Hammersmith\n */\n\n\nlet fares = new Fares();\n\n\nconst BUS = new transport('bus').transport;\nconst TUBE = new transport('tube').transport;\n\nlet passengerJourney = () => {\n    fares.barrierEntry(new Stations('Holborn'), TUBE);\n    fares.barrierLeave(new Stations(\"Earl's Court\"), TUBE);\n\n    fares.barrierEntry(new Stations(\"Earl's Court\"), BUS);\n    fares.barrierLeave(new Stations('Chelsea'), BUS);\n\n    fares.barrierEntry(new Stations(\"Earl's Court\"), TUBE);\n    fares.barrierLeave(new Stations('Hammersmith'), TUBE);\n\n    fares.calculateFare();\n}\n\n\npassengerJourney();\n\nlet newBalance = fares.currentFare;\n\nconsole.log(newBalance);\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import transport from './transports';\nexport default class Fares {\n    /**\n     * fare is calculated at max fare on entry\n     * on exit, max fare is removed, actual fare applied\n     * The fare defaults to the minimum price\n     * \n     * Anywhere in Zone 1               2.50\n     * Any one zone outside zone 1      2.00\n     * Any two zones including zone 1   3.00\n     * Any two zones excluding zone 1   2.25\n     * Any three zones                  3.20\n     * Any bus journey                  1.80\n     * \n     * Max possible fare is 3.20\n     */\n\n\n    constructor(credit = 30) {\n        this.credit = credit;\n        this.maxFare = 3.20;\n        this._currentFare = 0;\n        this.zonesTravelled = [];\n        this.busJourneyFare = 1.80;\n\n        this.enterBarrier = 'BARRIER_ENTRY';\n        this.leaveBarrier = 'BARRIER_LEAVE';\n\n        this.BUS = new transport('bus').transport;\n        this.TUBE = new transport('tube').transport;\n\n\n    }\n\n    /**\n     * Getter for current fare\n     */\n    get currentFare() {\n        return this._currentFare;\n    }\n\n    /**\n     * Setter for current fare\n     */\n    set currentFare(fare) {\n        this._currentFare = fare;\n    }\n\n    /**\n     * When the user enters the barrier, record the method of transport and the station including zones\n     *\n     * @param {object} station \n     * @param {object} method \n     */\n    barrierEntry(station, method) {\n        // Deduct the max fare\n        this.currentFare = (this.credit - this.maxFare);\n\n\n        // If travel is by bus, automatically deduct the bus fare\n        if (method.type === this.BUS.type) {\n            this.currentFare = (this.currentFare + this.maxFare) - this.busJourneyFare;\n        } else { // If the journey is by tube, push the zones and do the calculation on barrier exit\n            this.zonesTravelled.push(station.station);\n\n        }\n    }\n\n    /**\n     * When the user leaves the barrier, record the departing station and transport type\n     * @param {object} station \n     * @param {object} method \n     */\n    barrierLeave(station, method) {\n        // If travel is by bus, the fare has already been deducted\n        if (method.type === this.BUS.type) {\n            return;\n        } else { // Record the stations the user travelled through\n            this.zonesTravelled.push(station.station);\n            // Calculate the fare based on the stations passed through \n            // this.calculateFare(); \n        }\n\n    }\n\n    /**\n     * Calculate the fare based off zones travelled through\n     */\n    calculateFare() {\n        // create an array to hold the zones\n        let zones = [];\n\n        // iterate over the zones and extract the zone numbers\n        for (let value of this.zonesTravelled) {\n            zones.push(value.zone);\n        }\n\n        // Dedupe the zones\n        const uniqueZones = [...new Set(zones)];\n\n        // * Anywhere in Zone 1               2.50\n        // * Any one zone outside zone 1      2.00\n        // * Any two zones including zone 1   3.00\n        // * Any two zones excluding zone 1   2.25\n        // * Any three zones                  3.20\n        // * Any bus journey                  1.80   \n\n        console.log(uniqueZones);\n\n        switch (uniqueZones) {\n            // Anywhere in Zone 1\n            case uniqueZones.includes(\"1\") && !uniqueZones.includes(\"2\"):\n                console.log('Anywhere in Zone 1');\n                this.currentFare = (this.credit - 2.50);\n                break;\n\n            // Any two zones including zone 1\n            case uniqueZones.includes(\"2\") && uniqueZones.includes(\"1\") && !uniqueZones.includes(\"3\"):\n                console.log('Any two zones including zone 1');\n                this.currentFare = (this.credit - 2.00);\n                break;\n\n            // Any two zones excluding zone 1\n            case uniqueZones.includes(\"2\") && !uniqueZones.includes(\"1\") && uniqueZones.length > 2:\n                console.log('Any two zones excluding zone 1');\n                this.currentFare = (this.credit - 3.00);\n                break;\n            // Any three zones\n            case uniqueZones.includes(\"1\") && uniqueZones.includes(\"2\") && uniqueZones.includes(\"3\"):\n                console.log('Any three zones');\n                this.currentFare = (this.credit - 3.20);\n                break;\n            // If no conditions above are met\n            default:\n                console.log('No zones detected so deduct the max');\n                this.currentFare = (this.credit - this.maxFare);\n                break;\n\n        }\n\n        // TODO: ensure price does not exceed max fare\n\n    }\n\n\n}"],"sourceRoot":""}